version: '3.8'
services:
  postgres-db:
    container_name: postgres
    image: postgres:15.3-alpine
    restart: always
    environment:
      POSTGRES_PASSWORD: SuperSecret
      POSTGRES_USER: tools_management_user
      POSTGRES_DB: tools_management
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-U", "tools_management_user", "-d", "tools_management"]
      interval: 5s
      timeout: 1s
      retries: 3

  postgres-exporter:
    container_name: postgres-exporter
    image: prometheuscommunity/postgres-exporter:latest
    restart: always
    environment:
      - DATA_SOURCE_URI=postgres-db:5432/tools_management?sslmode=disable
      - DATA_SOURCE_USER=tools_management_user
      - DATA_SOURCE_PASS=SuperSecret
    ports:
      - "9187:9187"
    depends_on:
      - postgres-db

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:7.1
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: SuperSecret
    healthcheck:
      test: ["CMD", "wget", "-O", "-", "http://localhost:80/misc/ping"]
      interval: 5s
      timeout: 1s
      retries: 3
    ports:
      - "5050:80"
    volumes:
      - ./servers.json:/pgadmin4/servers.json
      - ./pgpass:/pgpass
    depends_on:
      - postgres-db

  minio:
    container_name: minio
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - /tmp:/data
    environment:
      MINIO_ROOT_USER: tools_management_user
      MINIO_ROOT_PASSWORD: SuperSecret
    command: server --console-address ":9001" /data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 5s
      timeout: 1s
      retries: 3

  minio-bucket-photo-person:
    container_name: minio-bucket-photo-person
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set tools_minio http://minio:9000 tools_management_user SuperSecret;
      /usr/bin/mc mb tools_minio/photopersonbucket;
      /usr/bin/mc anonymous set public tools_minio/photopersonbucket;
      exit 0;
      "

  minio-bucket-photo-tool:
    container_name: minio-bucket-photo-tool
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set tools_minio http://minio:9000 tools_management_user SuperSecret;
      /usr/bin/mc mb tools_minio/phototoolbucket;
      /usr/bin/mc anonymous set public tools_minio/phototoolbucket;
      exit 0;
      "

  tools:
    build:
      context: ..
      dockerfile: ./deployment/Dockerfile
    container_name: tools-management-api
    environment:
      DATABASE_PASSWORD: SuperSecret
      DATABASE_USER: tools_management_user
      DATABASE_URL: "jdbc:postgresql://postgres:5432/tools_management"
      INTEGRATION_FILE_STORAGE_API_URL: "http://file-storage:8080/file-storage-api"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/tools-management-api/actuator/health"]
      interval: 5s
      timeout: 1s
      retries: 3
    ports:
      - "8080:8080"
      - "4545:4545"
    depends_on:
      postgres-db:
        condition: service_healthy

  file-storage:
    build: https://${GIT_ACCESS_TOKEN}@github.com/alexnerd/file-storage-api.git#main
    container_name: file-storage
    environment:
      MINIO_LOGIN: tools_management_user
      MINIO_PASSWORD: SuperSecret
      MINIO_ENDPOINT: "http://minio:9000"
      MINIO_PHOTO_PERSON_BUCKET: photopersonbucket
      MINIO_PHOTO_TOOL_BUCKET: phototoolbucket
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/file-storage-api/actuator/health" ]
      interval: 5s
      timeout: 1s
      retries: 3
    ports:
      - "8070:8080"
    depends_on:
      minio:
        condition: service_healthy

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    healthcheck:
      test: [ "CMD", "wget", "-O", "-", "http://localhost:9090/graph"]
      interval: 5s
      timeout: 1s
      retries: 3
    ports:
      - "9090:9090"
    depends_on:
      tools:
        condition: service_healthy

  grafana:
    image: grafana/grafana
    container_name: grafana
    healthcheck:
      test: [ "CMD", "wget", "-O", "-", "http://localhost:3000/api/health" ]
      interval: 5s
      timeout: 1s
      retries: 3
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: SuperSecret
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards-json:/var/lib/grafana/dashboards
    depends_on:
      prometheus:
        condition: service_healthy